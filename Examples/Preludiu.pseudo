{#
using System.IO;

var __consoleIn = Console.In;
var __consoleOut = Console.Out;

TextReader __currentInFile = null;
TextWriter __currentOutFile = null;
#}

subalgoritm deschideFisierIntrare(fisier: Text)
  daca {# __currentInFile != null #} atunci
    {# __currentInFile.Close(); #}
  sf

  {#
    __currentInFile = new StreamReader(fisier);
    Console.SetIn(__currentInFile);
  #}
sf

subalgoritm deschideFisierIesire(fisier: Text)
  daca {# __currentOutFile != null #} atunci
    {# __currentOutFile.Close(); #}
  sf

  {#
    __currentOutFile = new StreamWriter(fisier);
    Console.SetOut(__currentOutFile);
  #}
sf

subalgoritm inchideFisierIntrare()
  daca {# __currentInFile != null #} atunci
    {#
      __currentInFile.Close();
      __currentInFile = null;

      Console.SetIn(__consoleIn);
    #}
  sf
sf

subalgoritm inchideFisierIesire()
  daca {# __currentOutFile != null #} atunci
    {#
      __currentOutFile.Close();
      __currentOutFile = null;

      Console.SetOut(__consoleOut);
    #}
  sf
sf

{# int lungime<T>(T[] a) { #}
  returneaza {# a.Length #}
sf

subalgoritm lungime(s: Text): Intreg
  returneaza {# s.Length #}
sf

subalgoritm absolut(i: Intreg): Intreg
  returneaza {# Math.Abs(i) #}
sf

subalgoritm absolut(r: Real): Real
  returneaza {# Math.Abs(r) #}
sf

subalgoritm citesteSir(sir: Intreg[])
  pentru i <- 0, lungime(sir) - 1 executa
    {# Console.Write($"[{i}]: "); #}
    citeste sir[i] (Intreg)
  sf
sf

subalgoritm citesteSir(sir: Real[])
  pentru i <- 0, lungime(sir) - 1 executa
    {# Console.Write($"[{i}]: "); #}
    citeste sir[i] (Real)
  sf
sf

subalgoritm citesteSir(sir: Logic[])
  pentru i <- 0, lungime(sir) - 1 executa
    {# Console.Write($"[{i}]: "); #}
    citeste sir[i] (Logic)
  sf
sf

subalgoritm citesteSir(sir: Text[])
  pentru i <- 0, lungime(sir) - 1 executa
    {# Console.Write($"[{i}]: "); #}
    citeste sir[i] (Text)
  sf
sf

{# void scriesir<T>(T[] sir) { #}
  scrie {# $"[{string.Join(", ", sir)}]" #}
sf
